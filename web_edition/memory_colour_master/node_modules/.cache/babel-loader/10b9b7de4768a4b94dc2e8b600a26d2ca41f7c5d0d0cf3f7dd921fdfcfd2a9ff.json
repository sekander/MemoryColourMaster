{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import'./App.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[pattern,setPattern]=useState('');// const [sendValue, setSendValue] = useState('');\nconst[responseMessage,setResponseMessage]=useState('');const[gameBoardSize,setGameBoardSize]=useState('80vw');// Default size\nconst[hoveredColor,setHoveredColor]=useState('');// State for hovered color\n// Function to update game board size based on window width\nconst updateGameBoardSize=()=>{if(window.innerWidth>=1200){// Check if width is full screen (or a certain threshold)\nsetGameBoardSize('600px');// Set a fixed size for larger screens\n}else{setGameBoardSize('80vw');// Set to a percentage for smaller screens\n}};useEffect(()=>{updateGameBoardSize();const fetchPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/getpattern');// Update the state with the response message\nsetPattern(response.data.message);}catch(error){// Handle error case\nconsole.error(\"Error fetching the greeting: \",error);}};fetchPattern();// Add event listener to update size on resize\nwindow.addEventListener('resize',updateGameBoardSize);// Clean up the event listener on unmount\nreturn()=>{window.removeEventListener('resize',updateGameBoardSize);};},[]);// The empty array ensures the effect runs only once (when the component mounts)\nconst handleSquareClick=colour=>{console.log(`${colour} square clicked!`);// setSendValue(colour);\n};const getPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/getpattern');// Update the state with the response message\nsetPattern(response.data.message);}catch(error){// Handle error case\nconsole.error(\"Error fetching the greeting: \",error);}};const clearPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/clearpattern');setResponseMessage(response.data.message);setPattern(\"\");}catch(error){console.error(\"Error clearing the pattern : \",error);}};//POST\n// Send message to ASP.NET \n//const sendPattern = async (intParam) => {\nconst sendPattern=async newSendValue=>{// const sendPattern = async () => {\ntry{// const response = await axios.post('/api/memorycolourmaster/sendpattern', { text: newSendValue});\nconst response=await axios.post('/api/memorycolourmaster/send',{text:newSendValue});//const response = await axios.post('/api/memorycolourmaster/send', { text: newSendValue});\n//const response = await axios.post('/api/memorycolourmaster/send', { text: newSendValue});\n// const response = await axios.post('/api/memorycolourmaster/send', { text: sendValue});\nsetResponseMessage(response.data.message);//setInputValue(''); // Clear input field after sending\n//setSendValue('');\n}catch(error){console.error(\"Error sending the message: \",error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",style:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{style:{...styles.gameboard,width:gameBoardSize},children:[/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.red,backgroundColor:'red'},onMouseEnter:()=>setHoveredColor('Red'),onMouseLeave:()=>setHoveredColor(''),onClick:()=>{handleSquareClick('Red');sendPattern('1');}}),/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.blue,backgroundColor:'blue'},onMouseEnter:()=>setHoveredColor('Blue'),onMouseLeave:()=>setHoveredColor(''),onClick:()=>{handleSquareClick('Blue');sendPattern('2');}}),/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.green,backgroundColor:'green'},onMouseEnter:()=>setHoveredColor('Green'),onMouseLeave:()=>setHoveredColor(''),onClick:()=>{handleSquareClick('Green');sendPattern('3');}}),/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.yellow,backgroundColor:'yellow'},onMouseEnter:()=>setHoveredColor('Yellow'),onMouseLeave:()=>setHoveredColor(''),onClick:()=>{handleSquareClick('Yellow');sendPattern('4');}}),hoveredColor&&/*#__PURE__*/_jsxs(_Fragment,{children:[hoveredColor==='Red'&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_red}}),hoveredColor==='Blue'&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_blue}}),hoveredColor==='Green'&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_green}}),hoveredColor==='Yellow'&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_yellow}})]})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"player_ui\",className:\"ui\",style:styles.ui,children:[/*#__PURE__*/_jsx(\"h1\",{children:pattern}),/*#__PURE__*/_jsx(\"button\",{onClick:getPattern,children:\"Generate new pattern \"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearPattern,children:\"Clear pattern \"}),/*#__PURE__*/_jsx(\"h2\",{children:responseMessage})]})]});}//Inline styles\nconst styles={container:{display:'flex',flexDirection:'column',// Arrange children in a column\njustifyContent:'center',alignItems:'center',height:'100vh',gap:'20px'},gameboard:{position:'relative',// Set position relative for absolute children\ndisplay:'grid',// Enable grid layout\ngridTemplateColumns:'repeat(2, 1fr)',// 2 equal columns\ngridTemplateRows:'repeat(2, 1fr)',// 2 equal rows\nheight:'80vh',// Fill the full height of the viewport\n//width: '80vw', // Fill the full width of the viewport\n// width: {gameBoardSize}, // Fill the full width of the viewport\ngap:'10px',// Space between grid items\nbackgroundColor:'#000',// Black background for the game board\nborder:'2px solid #FF4500',// Border for the game board\npadding:'20px',// Padding around the grid container\nmarginBottom:'20px',// Space below the game board\nmarginTop:'20px',// Space at the top of the game board\nzIndex:0// Set behind colored squares\n},square:{// position: 'absolute', // Absolute positioning for overlapping squares\ndisplay:'flex',// Use flexbox for centering content inside the squares\njustifyContent:'center',// Center content horizontally\nalignItems:'center',// Center content vertically\nbackgroundColor:'#007bff',// Background color for squares\nborderRadius:'5px',// Rounded corners for squares\nfontSize:'24px',// Font size for square text\ncolor:'#fff',// Text color for visibility\ncursor:'pointer'// Pointer cursor for interactive squares\n// width: '100px', // Size of the colored squares\n// height: '100px',\n},red:{backgroundColor:'red',// top: '10px', // Adjust position as needed\n// left: '10px',\nzIndex:2// Set behind colored squares\n},blue:{backgroundColor:'blue',// top: '10px', // Adjust position as needed\n// left: 'calc(100% - 110px)', // Position for the blue square\nzIndex:2// Set behind colored squares\n},green:{backgroundColor:'green',// top: 'calc(100% - 110px)', // Adjust position as needed\n// left: '10px',\nzIndex:2// Set behind colored squares\n},yellow:{backgroundColor:'yellow',// top: 'calc(100% - 110px)', // Adjust position as needed\n// left: 'calc(100% - 110px)', // Position for the yellow square\nzIndex:2// Set behind colored squares\n},white:{backgroundColor:'white',width:'50%',// Larger width for white squares\nheight:'50%',// Larger height for white squares\nposition:'absolute',// Make it absolute to fill the gameboard\nzIndex:1// Set behind colored squares\n},white_red:{top:'2.5%',// Align to the top of the gameboard\nleft:'0'// Align to the left of the gameboard\n},white_blue:{top:'2.5%',// Align to the top of the gameboard\nleft:'50%'// Align to the right of the gameboard\n// left: '50', // Align to the left of the gameboard\n//left: 'calc(100% - 120px)', // Align to the right of the gameboard\n},white_green:{top:'50%',// Align to the bottom of the gameboard\n//top: 'calc(100% - 120px)', // Align to the bottom of the gameboard\n// top: '50', // Align to the top of the gameboard\nleft:'0'// Align to the left of the gameboard\n},white_yellow:{top:'50%',// Align to the bottom of the gameboard\nleft:'50%'// Align to the right of the gameboard\n//top: 'calc(100% - 120px)', // Align to the bottom of the gameboard\n//left: 'calc(100% - 120px)', // Align to the right of the gameboard\n// top: '50', // Align to the top of the gameboard\n// left: '50', // Align to the left of the gameboard\n},ui:{backgroundColor:'#f0f0f0',padding:'20px',borderRadius:'10px',textAlign:'center',boxShadow:'0px 4px 10px rgba(0, 0, 0, 0.1)',display:'flex',flexDirection:'column',// Stack items vertically\nalignItems:'center',// Center align items horizontally\ngap:'10px'// Add some space between items\n}};export default App;","map":{"version":3,"names":["React","useEffect","useState","axios","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","pattern","setPattern","responseMessage","setResponseMessage","gameBoardSize","setGameBoardSize","hoveredColor","setHoveredColor","updateGameBoardSize","window","innerWidth","fetchPattern","response","get","data","message","error","console","addEventListener","removeEventListener","handleSquareClick","colour","log","getPattern","clearPattern","sendPattern","newSendValue","post","text","className","style","styles","container","children","gameboard","width","square","red","backgroundColor","onMouseEnter","onMouseLeave","onClick","blue","green","yellow","white","white_red","white_blue","white_green","white_yellow","id","ui","display","flexDirection","justifyContent","alignItems","height","gap","position","gridTemplateColumns","gridTemplateRows","border","padding","marginBottom","marginTop","zIndex","borderRadius","fontSize","color","cursor","top","left","textAlign","boxShadow"],"sources":["/home/fnky/C0de/C#/NET/React/ReactAspNetApp/memory_colour_master/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [pattern, setPattern] = useState('');\n  // const [sendValue, setSendValue] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n  const [gameBoardSize, setGameBoardSize] = useState('80vw'); // Default size\n  const [hoveredColor, setHoveredColor] = useState(''); // State for hovered color\n  \n   // Function to update game board size based on window width\n   const updateGameBoardSize = () => {\n    if (window.innerWidth >= 1200) { // Check if width is full screen (or a certain threshold)\n      setGameBoardSize('600px'); // Set a fixed size for larger screens\n    } else {\n      setGameBoardSize('80vw'); // Set to a percentage for smaller screens\n    }\n  };\n\n  useEffect(() => {\n    updateGameBoardSize();\n    \n    const fetchPattern = async () => {\n      try {\n        const response = await axios.get('/api/memorycolourmaster/getpattern');\n        // Update the state with the response message\n        setPattern(response.data.message);\n      } catch (error) {\n        // Handle error case\n        console.error(\"Error fetching the greeting: \", error);\n      }      \n    };\n    \n   fetchPattern(); \n    \n     // Add event listener to update size on resize\n     window.addEventListener('resize', updateGameBoardSize);\n\n     // Clean up the event listener on unmount\n     return () => {\n       window.removeEventListener('resize', updateGameBoardSize);\n     };\n}, []); // The empty array ensures the effect runs only once (when the component mounts)\n\n\n\n \n  const handleSquareClick = (colour) => {\n    console.log(`${colour} square clicked!`);\n    // setSendValue(colour);\n  };\n\n  const getPattern = async () => {\n      try {\n        const response = await axios.get('/api/memorycolourmaster/getpattern');\n        // Update the state with the response message\n        setPattern(response.data.message);\n      } catch (error) {\n        // Handle error case\n        console.error(\"Error fetching the greeting: \", error);\n      }      \n   };\n  \n   const clearPattern = async () => {\n    try {\n      const response = await axios.get('/api/memorycolourmaster/clearpattern');\n      setResponseMessage(response.data.message);\n      setPattern(\"\");\n    } catch (error) {\n      console.error(\"Error clearing the pattern : \", error);\n    }\n  };\n\n  //POST\n  // Send message to ASP.NET \n  //const sendPattern = async (intParam) => {\n  const sendPattern = async (newSendValue) => {\n  // const sendPattern = async () => {\n    try {\n      // const response = await axios.post('/api/memorycolourmaster/sendpattern', { text: newSendValue});\n      const response = await axios.post('/api/memorycolourmaster/send', { text: newSendValue});\n      //const response = await axios.post('/api/memorycolourmaster/send', { text: newSendValue});\n      //const response = await axios.post('/api/memorycolourmaster/send', { text: newSendValue});\n      // const response = await axios.post('/api/memorycolourmaster/send', { text: sendValue});\n      setResponseMessage(response.data.message);\n      //setInputValue(''); // Clear input field after sending\n      //setSendValue('');\n    } catch (error) {\n      console.error(\"Error sending the message: \", error);\n    }\n  };\n\n\n\n\n\n  return (\n    <div className=\"App\" style={styles.container}>\n      <div style={{...styles.gameboard, width: gameBoardSize}}>\n          <div\n            style={{ ...styles.square, ...styles.red, backgroundColor: 'red'}}\n            onMouseEnter={() => setHoveredColor('Red')}\n            onMouseLeave={() => setHoveredColor('')}\n            onClick={() => {\n              handleSquareClick('Red');\n              sendPattern('1');\n\n            }}\n           ></div>\n          <div\n            style={{ ...styles.square, ...styles.blue, backgroundColor: 'blue'}}\n            onMouseEnter={() => setHoveredColor('Blue')}\n            onMouseLeave={() => setHoveredColor('')}\n            onClick={() => {\n              handleSquareClick('Blue');\n              sendPattern('2');\n            }}\n          ></div>\n          <div\n            style={{ ...styles.square, ...styles.green, backgroundColor: 'green'}}\n            onMouseEnter={() => setHoveredColor('Green')}\n            onMouseLeave={() => setHoveredColor('')}\n            onClick={() => {\n              handleSquareClick('Green')\n              sendPattern('3');\n            }}\n          ></div>\n          <div\n            style={{ ...styles.square, ...styles.yellow, backgroundColor: 'yellow'}}\n            onMouseEnter={() => setHoveredColor('Yellow')}\n            onMouseLeave={() => setHoveredColor('')}\n            onClick={() => {\n              handleSquareClick('Yellow')\n              sendPattern('4');\n            }}\n          ></div>\n             {/* White squares in the background with conditional rendering */}\n              {hoveredColor && (\n                <>\n                  {hoveredColor === 'Red' && (\n                    <div style={{ ...styles.white, ...styles.white_red }}></div>\n                  )}\n                  {hoveredColor === 'Blue' && (\n                    <div style={{ ...styles.white, ...styles.white_blue }}></div>\n                  )}\n                  {hoveredColor === 'Green' && (\n                    <div style={{ ...styles.white, ...styles.white_green }}></div>\n                  )}\n                  {hoveredColor === 'Yellow' && (\n                    <div style={{ ...styles.white, ...styles.white_yellow }}></div>\n                  )}\n                </>\n              )}\n      </div>\n    \n      <div id=\"player_ui\" className='ui' style={styles.ui}>\n        <h1>{pattern}</h1>\n        <button onClick={getPattern}>Generate new pattern </button>\n        <button onClick={clearPattern}>Clear pattern </button>\n        <h2>{responseMessage}</h2>\n      </div>\n    \n    </div>\n  );\n}\n\n//Inline styles\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column', // Arrange children in a column\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    gap: '20px',\n  },\n  gameboard: {\n    position: 'relative', // Set position relative for absolute children\n    display: 'grid', // Enable grid layout\n    gridTemplateColumns: 'repeat(2, 1fr)', // 2 equal columns\n    gridTemplateRows: 'repeat(2, 1fr)', // 2 equal rows\n    height: '80vh', // Fill the full height of the viewport\n    //width: '80vw', // Fill the full width of the viewport\n    // width: {gameBoardSize}, // Fill the full width of the viewport\n    gap: '10px', // Space between grid items\n    backgroundColor: '#000', // Black background for the game board\n    border: '2px solid #FF4500', // Border for the game board\n    padding: '20px', // Padding around the grid container\n    marginBottom: '20px', // Space below the game board\n    marginTop: '20px', // Space at the top of the game board\n    zIndex: 0, // Set behind colored squares\n  },\n  square: {\n    // position: 'absolute', // Absolute positioning for overlapping squares\n    display: 'flex', // Use flexbox for centering content inside the squares\n    justifyContent: 'center', // Center content horizontally\n    alignItems: 'center', // Center content vertically\n    backgroundColor: '#007bff', // Background color for squares\n    borderRadius: '5px', // Rounded corners for squares\n    fontSize: '24px', // Font size for square text\n    color: '#fff', // Text color for visibility\n    cursor: 'pointer', // Pointer cursor for interactive squares\n    // width: '100px', // Size of the colored squares\n    // height: '100px',\n  \n  },\n    red: {\n      backgroundColor: 'red',\n      // top: '10px', // Adjust position as needed\n      // left: '10px',\n      zIndex: 2, // Set behind colored squares\n    },\n    blue: {\n      backgroundColor: 'blue',\n      // top: '10px', // Adjust position as needed\n      // left: 'calc(100% - 110px)', // Position for the blue square\n      zIndex: 2, // Set behind colored squares\n    },\n    green: {\n      backgroundColor: 'green',\n      // top: 'calc(100% - 110px)', // Adjust position as needed\n      // left: '10px',\n      zIndex: 2, // Set behind colored squares\n    },\n    yellow: {\n      backgroundColor: 'yellow',\n      // top: 'calc(100% - 110px)', // Adjust position as needed\n      // left: 'calc(100% - 110px)', // Position for the yellow square\n      zIndex: 2, // Set behind colored squares\n    },\n    white: {\n      backgroundColor: 'white',\n      width: '50%', // Larger width for white squares\n      height: '50%', // Larger height for white squares\n      position: 'absolute', // Make it absolute to fill the gameboard\n      zIndex: 1, // Set behind colored squares\n    },\n    white_red: {\n      top: '2.5%', // Align to the top of the gameboard\n      left: '0', // Align to the left of the gameboard\n    },\n    white_blue: {\n      top: '2.5%', // Align to the top of the gameboard\n      left: '50%', // Align to the right of the gameboard\n      // left: '50', // Align to the left of the gameboard\n      //left: 'calc(100% - 120px)', // Align to the right of the gameboard\n    },\n    white_green: {\n      top: '50%', // Align to the bottom of the gameboard\n      //top: 'calc(100% - 120px)', // Align to the bottom of the gameboard\n      // top: '50', // Align to the top of the gameboard\n      left: '0', // Align to the left of the gameboard\n    },\n    white_yellow: {\n      top: '50%', // Align to the bottom of the gameboard\n      left: '50%', // Align to the right of the gameboard\n      //top: 'calc(100% - 120px)', // Align to the bottom of the gameboard\n      //left: 'calc(100% - 120px)', // Align to the right of the gameboard\n\n      // top: '50', // Align to the top of the gameboard\n      // left: '50', // Align to the left of the gameboard\n    },\n  \n  \n  ui: {\n    backgroundColor: '#f0f0f0',\n    padding: '20px',\n    borderRadius: '10px',\n    textAlign: 'center',\n    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',\n    display: 'flex',\n    flexDirection: 'column', // Stack items vertically\n    alignItems: 'center', // Center align items horizontally\n    gap: '10px', // Add some space between items\n  },\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}