{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[pattern,setPattern]=useState('');const[responseMessage,setResponseMessage]=useState('');const[responseMatchMessage,setResponseMatchMessage]=useState('');const[gameBoardSize,setGameBoardSize]=useState('80vw');// Default size\nconst[interactive,setInteractive]=useState(true);const[whiteSquareVisibility,setWhiteSquareVisibility]=useState({Red:false,Blue:false,Green:false,Yellow:false});// State to manage visibility of white squares\nconst[count,setCount]=useState(0);// State to hold the counter value\nconst[isRunning,setIsRunning]=useState(true);// State to control the loop\nconst[isMatching,setIsMatching]=useState(true);// State to control the loop\nconst[matched,setMatched]=useState(false);// const [isRunning, setIsRunning] = useState(false); // State to control the loop\nconst[index,setIndex]=useState(0);// Initialize index\n// let index = 0;\n// Function to update game board size based on window width\nconst updateGameBoardSize=()=>{if(window.innerWidth>=1200){// Check if width is full screen (or a certain threshold)\nsetGameBoardSize('600px');// Set a fixed size for larger screens\n}else{setGameBoardSize('60vw');// Set to a percentage for smaller screens\n}};const displayPatternWithDelay=async()=>{setInteractive(false);for(let i=0;i<pattern.length;i++){console.log(\"PATTERN : \"+pattern[i]);// Set visibility based on the character\nsetWhiteSquareVisibility(prev=>({...prev,Red:pattern[i]==='1',Blue:pattern[i]==='2',Green:pattern[i]==='3',Yellow:pattern[i]==='4'}));// Wait for 1 second (1000 ms) before continuing to the next character\n//await new Promise((resolve) => setTimeout(resolve, 1000));\nawait new Promise(resolve=>setTimeout(resolve,750));setWhiteSquareVisibility({Red:false,Blue:false,Green:false,Yellow:false});await new Promise(resolve=>setTimeout(resolve,250));}// for (const char of pattern) {\n//   console.log(char); // Logs each character\n//   // Set visibility based on the character\n//   setWhiteSquareVisibility((prev) => ({\n//     ...prev,\n//     Red: char === '1',\n//     Blue: char === '2',\n//     Green: char === '3',\n//     Yellow: char === '4',\n//   }));\n//   // Wait for 1 second (1000 ms) before continuing to the next character\n//   //await new Promise((resolve) => setTimeout(resolve, 1000));\n//   await new Promise((resolve) => setTimeout(resolve, 750));\n//   setWhiteSquareVisibility({\n//     Red: false,\n//     Blue: false,\n//     Green: false,\n//     Yellow: false,\n//   });\n//   await new Promise((resolve) => setTimeout(resolve, 250));\n// }\n// After the loop, reset visibility of all squares\nsetWhiteSquareVisibility({Red:false,Blue:false,Green:false,Yellow:false});setInteractive(true);};//Game Loop\n// \n// Game Loop\nuseEffect(()=>{const startLoop=async()=>{if(isRunning){console.log(\"isRunning...\");// toggleWhiteSquareVisibility('Red', true);\n// await displayPatternWithDelay();\n// setIsRunning(false); // Stop running after displaying the pattern\n// setIndex(0); // Reset index\nsetCount(prevCount=>prevCount+1);// Increment count after pattern display\n}};startLoop();// Call the async function to initiate the loop\n},[isRunning]);// Effect runs when isRunning changes\n/*  useEffect(() => {\n  let intervalId; // Variable to hold the interval ID\n\n  // setIsRunning(true);\n  // Start the loop when isRunning is true\n  if (isMatching) {\n    intervalId = setInterval(() => {\n      getMatch();\n\n      if(matched)\n      {\n        getPattern();\n        setMatched(false);\n      }        \n\n      \n    }, 1000);\n  }\n\n  // Clean up the interval on component unmount or when isRunning changes\n  return () => {\n    clearInterval(intervalId); // Clear the interval\n  };\n}, [isMatching]); // Effect runs when isRunning changes\n */// Effect to start the interval loop when isMatching is true\nuseEffect(()=>{if(!isMatching)return;// Only run if isMatching is true\nconst intervalId=setInterval(async()=>{getMatch();// toggleWhiteSquareVisibility('Red', true);\n// for(const p of pattern )\n// {\n//   console.log(\"PATTERN : \" + p)\n// }\n// for (let i = 0; i < pattern.length; i++) {\n//   console.log(\"PATTERN : \" + pattern[i]);\n// }\n//NEED TO FIX \nif(matched){displayPatternWithDelay();// console.log(\"#############PATTERN########## : \" + pattern);\nconsole.log(\"Matched\");//Generate new pattern to match\ngetPattern();// console.log(\"#############PATTERN########## : \" + pattern);\n//Clear player session match string\nclearPlayerPattern();setMatched(false);// Reset matched for the next interval\nsetIsMatching(false);}},1000);// Cleanup interval when isMatching changes or on unmount\nreturn()=>clearInterval(intervalId);},[isMatching,matched]);// Re-run effect when `isMatching` or `matched` changes\nconst handleSquareClick=colour=>{console.log(`${colour} square clicked!`);// setSendValue(colour);\n};const getPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/getpattern');// Update the state with the response message\nsetPattern(response.data.message);console.log(\"#############PATTERN########## : \"+pattern);}catch(error){// Handle error case\nconsole.error(\"Error fetching the greeting: \",error);}};const clearPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/clearpattern');setResponseMessage(response.data.message);setPattern(\"\");}catch(error){console.error(\"Error clearing the pattern : \",error);}};const clearPlayerPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/clearplayerpattern');setResponseMessage(response.data.message);// setPattern(\"\");\n}catch(error){console.error(\"Error clearing the pattern : \",error);}};const getMatch=async()=>{try{const response=await axios.get('/api/memorycolourmaster/getmatch');setResponseMatchMessage(response.data.message);if(response.data.message===\"True\")// if(responseMatchMessage === \"True\")\n{console.log(\"True\");console.log(`${responseMatchMessage}`);setMatched(true);}else{console.log(\"False\");console.log(`${responseMatchMessage}`);setMatched(false);}}catch(error){console.error(\"Error clearing the pattern : \",error);}};//POST\n// Send message to ASP.NET \nconst sendPattern=async newSendValue=>{try{const response=await axios.post('/api/memorycolourmaster/send',{text:newSendValue});setResponseMessage(response.data.message);}catch(error){console.error(\"Error sending the message: \",error);}};// Function to toggle visibility of white squares based on hovered color\nconst toggleWhiteSquareVisibility=(color,isVisible)=>{setWhiteSquareVisibility(prev=>({...prev,[color]:isVisible}));};// Function to toggle the game loop on and off\nconst toggleGameLoop=()=>{setIsRunning(prev=>!prev);// Toggle the isRunning state\n};const validatePattern=colour=>{if(pattern[index]===colour){console.log(`${colour} Entered`);console.log(\"CORRECT!!!\");// index++;\nsetIndex(prevIndex=>prevIndex+1);// Move to the next index\nconsole.log(\"Current Index: \"+(index+1));setIndex(0);if(index<pattern.length)getPattern();}else{console.log(\"Wrong!!!\");// index = 0;\nsetIndex(0);clearPattern();getPattern();console.log(\"Current Index: \"+index);}// console.log(char); // Logs each character\n};useEffect(()=>{updateGameBoardSize();const fetchPattern=async()=>{try{const response=await axios.get('/api/memorycolourmaster/getpattern');// Update the state with the response message\nsetPattern(response.data.message);}catch(error){// Handle error case\nconsole.error(\"Error fetching the greeting: \",error);}};fetchPattern();// setIsRunning(true);\n// Add event listener to update size on resize\nwindow.addEventListener('resize',updateGameBoardSize);// Clean up the event listener on unmount\nreturn()=>{window.removeEventListener('resize',updateGameBoardSize);};},[]);// The empty array ensures the effect runs only once (when the component mounts)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",style:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{style:{...styles.gameboard,width:gameBoardSize},children:[/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.red,backgroundColor:'red'},onMouseEnter:()=>interactive?toggleWhiteSquareVisibility('Red',true):null,onMouseLeave:()=>interactive?toggleWhiteSquareVisibility('Red',false):null,onClick:()=>{if(interactive){handleSquareClick('Red');sendPattern('1');setIsMatching(true);// validatePattern('1');\n}}}),/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.blue,backgroundColor:'blue'},onMouseEnter:()=>interactive?toggleWhiteSquareVisibility('Blue',true):null,onMouseLeave:()=>interactive?toggleWhiteSquareVisibility('Blue',false):null,onClick:()=>{if(interactive){handleSquareClick('Blue');sendPattern('2');setIsMatching(true);// validatePattern('2');\n}}}),/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.green,backgroundColor:'green'},onMouseEnter:()=>interactive?toggleWhiteSquareVisibility('Green',true):null,onMouseLeave:()=>interactive?toggleWhiteSquareVisibility('Green',false):null,onClick:()=>{if(interactive){handleSquareClick('Green');sendPattern('3');setIsMatching(true);// validatePattern('3');\n}}}),/*#__PURE__*/_jsx(\"div\",{style:{...styles.square,...styles.yellow,backgroundColor:'yellow'},onMouseEnter:()=>interactive?toggleWhiteSquareVisibility('Yellow',true):null,onMouseLeave:()=>interactive?toggleWhiteSquareVisibility('Yellow',false):null,onClick:()=>{if(interactive){handleSquareClick('Yellow');sendPattern('4');setIsMatching(true);console.log(\"#############PATTERN########## : \"+pattern);// validatePattern('4');\n}}}),whiteSquareVisibility.Red&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_red,backgroundColor:interactive?'white':'cyan'}}),whiteSquareVisibility.Blue&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_blue,backgroundColor:interactive?'white':'cyan'}}),whiteSquareVisibility.Green&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_green,backgroundColor:interactive?'white':'cyan'}}),whiteSquareVisibility.Yellow&&/*#__PURE__*/_jsx(\"div\",{style:{...styles.white,...styles.white_yellow,backgroundColor:interactive?'white':'cyan'}})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"player_ui\",className:\"ui\",style:styles.ui,children:[/*#__PURE__*/_jsx(\"h1\",{children:pattern}),/*#__PURE__*/_jsx(\"button\",{onClick:getPattern,children:\"Generate new pattern \"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearPattern,children:\"Clear pattern \"}),/*#__PURE__*/_jsx(\"button\",{style:styles.button,onClick:()=>setInteractive(prev=>!prev)// Directly toggle the state\n,children:interactive?'Disable Interaction':'Enable Interaction'}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Counter: \",count]}),/*#__PURE__*/_jsx(\"button\",{disabled:!interactive,onClick:toggleGameLoop,children:interactive?'Start Loop':'Looping'}),/*#__PURE__*/_jsx(\"h2\",{children:responseMessage}),/*#__PURE__*/_jsx(\"h2\",{children:responseMatchMessage})]})]});}//Inline styles\nconst styles={container:{display:'flex',flexDirection:'column',// Arrange children in a column\njustifyContent:'center',alignItems:'center',height:'100vh',gap:'20px'},gameboard:{position:'relative',// Set position relative for absolute children\ndisplay:'grid',// Enable grid layout\ngridTemplateColumns:'repeat(2, 1fr)',// 2 equal columns\ngridTemplateRows:'repeat(2, 1fr)',// 2 equal rows\nheight:'80vh',// Fill the full height of the viewport\ngap:'10px',// Space between grid items\nbackgroundColor:'#000',// Black background for the game board\nborder:'2px solid #FF4500',// Border for the game board\npadding:'20px',// Padding around the grid container\nmarginBottom:'20px',// Space below the game board\nmarginTop:'20px',// Space at the top of the game board\nzIndex:0// Set behind colored squares\n},square:{// position: 'absolute', // Absolute positioning for overlapping squares\ndisplay:'flex',// Use flexbox for centering content inside the squares\njustifyContent:'center',// Center content horizontally\nalignItems:'center',// Center content vertically\nbackgroundColor:'#007bff',// Background color for squares\nborderRadius:'5px',// Rounded corners for squares\nfontSize:'24px',// Font size for square text\ncolor:'#fff',// Text color for visibility\ncursor:'pointer'// Pointer cursor for interactive squares\n},red:{backgroundColor:'red',zIndex:2// Set behind colored squares\n},blue:{backgroundColor:'blue',zIndex:2// Set behind colored squares\n},green:{backgroundColor:'green',zIndex:2// Set behind colored squares\n},yellow:{backgroundColor:'yellow',zIndex:2// Set behind colored squares\n},white:{backgroundColor:'white',width:'47.5%',// Larger width for white squares\nheight:'46.5%',// Larger height for white squares\nposition:'absolute',// Make it absolute to fill the gameboard\nzIndex:1// Set behind colored squares\n},white_red:{top:'3.5%',// Align to the top of the gameboard\nleft:'2.5%'// Align to the left of the gameboard\n},white_blue:{top:'3.5%',// Align to the top of the gameboard\nleft:'50%'// Align to the right of the gameboard\n},white_green:{top:'50%',// Align to the bottom of the gameboard\nleft:'2.5%'// Align to the left of the gameboard\n},white_yellow:{top:'50%',// Align to the bottom of the gameboard\nleft:'50%'// Align to the right of the gameboard\n},ui:{backgroundColor:'#f0f0f0',padding:'20px',borderRadius:'10px',textAlign:'center',boxShadow:'0px 4px 10px rgba(0, 0, 0, 0.1)',display:'flex',flexDirection:'column',// Stack items vertically\nalignItems:'center',// Center align items horizontally\ngap:'10px'// Add some space between items\n}};export default App;","map":{"version":3,"names":["React","useEffect","useState","axios","jsx","_jsx","jsxs","_jsxs","App","pattern","setPattern","responseMessage","setResponseMessage","responseMatchMessage","setResponseMatchMessage","gameBoardSize","setGameBoardSize","interactive","setInteractive","whiteSquareVisibility","setWhiteSquareVisibility","Red","Blue","Green","Yellow","count","setCount","isRunning","setIsRunning","isMatching","setIsMatching","matched","setMatched","index","setIndex","updateGameBoardSize","window","innerWidth","displayPatternWithDelay","i","length","console","log","prev","Promise","resolve","setTimeout","startLoop","prevCount","intervalId","setInterval","getMatch","getPattern","clearPlayerPattern","clearInterval","handleSquareClick","colour","response","get","data","message","error","clearPattern","sendPattern","newSendValue","post","text","toggleWhiteSquareVisibility","color","isVisible","toggleGameLoop","validatePattern","prevIndex","fetchPattern","addEventListener","removeEventListener","className","style","styles","container","children","gameboard","width","square","red","backgroundColor","onMouseEnter","onMouseLeave","onClick","blue","green","yellow","white","white_red","white_blue","white_green","white_yellow","id","ui","button","disabled","display","flexDirection","justifyContent","alignItems","height","gap","position","gridTemplateColumns","gridTemplateRows","border","padding","marginBottom","marginTop","zIndex","borderRadius","fontSize","cursor","top","left","textAlign","boxShadow"],"sources":["/home/fnky/C0de/C#/NET/MemoryColourMaster/memory_colour_master/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [pattern, setPattern] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n  const [responseMatchMessage, setResponseMatchMessage] = useState('');\n  const [gameBoardSize, setGameBoardSize] = useState('80vw'); // Default size\n  const [interactive, setInteractive] = useState(true);\n  const [whiteSquareVisibility, setWhiteSquareVisibility] = useState({\n    Red: false,\n    Blue: false,\n    Green: false,\n    Yellow: false,\n  }); // State to manage visibility of white squares\n  \n\n  const [count, setCount] = useState(0); // State to hold the counter value\n  const [isRunning, setIsRunning] = useState(true); // State to control the loop\n  const [isMatching, setIsMatching] = useState(true); // State to control the loop\n  const [matched, setMatched] = useState(false);\n  // const [isRunning, setIsRunning] = useState(false); // State to control the loop\n\n  const [index, setIndex] = useState(0); // Initialize index\n  // let index = 0;\n\n  \n   // Function to update game board size based on window width\n   const updateGameBoardSize = () => {\n    if (window.innerWidth >= 1200) { // Check if width is full screen (or a certain threshold)\n      setGameBoardSize('600px'); // Set a fixed size for larger screens\n    } else {\n      setGameBoardSize('60vw'); // Set to a percentage for smaller screens\n    }\n  };\n\n\n  const displayPatternWithDelay = async () => {\n    setInteractive(false);\n    for (let i = 0; i < pattern.length ; i++) {\n      console.log(\"PATTERN : \" + pattern[i]);\n\n      // Set visibility based on the character\n      setWhiteSquareVisibility((prev) => ({\n        ...prev,\n        Red: pattern[i] === '1',\n        Blue: pattern[i] === '2',\n        Green: pattern[i] === '3',\n        Yellow: pattern[i] === '4',\n      }));\n  \n      // Wait for 1 second (1000 ms) before continuing to the next character\n      //await new Promise((resolve) => setTimeout(resolve, 1000));\n      await new Promise((resolve) => setTimeout(resolve, 750));\n      setWhiteSquareVisibility({\n        Red: false,\n        Blue: false,\n        Green: false,\n        Yellow: false,\n      });\n      await new Promise((resolve) => setTimeout(resolve, 250));\n    }\n    // for (const char of pattern) {\n    //   console.log(char); // Logs each character\n  \n    //   // Set visibility based on the character\n    //   setWhiteSquareVisibility((prev) => ({\n    //     ...prev,\n    //     Red: char === '1',\n    //     Blue: char === '2',\n    //     Green: char === '3',\n    //     Yellow: char === '4',\n    //   }));\n  \n    //   // Wait for 1 second (1000 ms) before continuing to the next character\n    //   //await new Promise((resolve) => setTimeout(resolve, 1000));\n    //   await new Promise((resolve) => setTimeout(resolve, 750));\n    //   setWhiteSquareVisibility({\n    //     Red: false,\n    //     Blue: false,\n    //     Green: false,\n    //     Yellow: false,\n    //   });\n    //   await new Promise((resolve) => setTimeout(resolve, 250));\n    // }\n  \n    // After the loop, reset visibility of all squares\n    setWhiteSquareVisibility({\n      Red: false,\n      Blue: false,\n      Green: false,\n      Yellow: false,\n    });\n    setInteractive(true);\n  };\n\n  \n//Game Loop\n  // \n  // Game Loop\n  useEffect(() => {\n    const startLoop = async () => {\n      if (isRunning) {\n        console.log(\"isRunning...\");\n        // toggleWhiteSquareVisibility('Red', true);\n        // await displayPatternWithDelay();\n        // setIsRunning(false); // Stop running after displaying the pattern\n        // setIndex(0); // Reset index\n        setCount((prevCount) => prevCount + 1); // Increment count after pattern display\n      }\n    };\n\n    startLoop(); // Call the async function to initiate the loop\n\n  }, [isRunning]); // Effect runs when isRunning changes\n\n\n/*  useEffect(() => {\n  let intervalId; // Variable to hold the interval ID\n\n  // setIsRunning(true);\n  // Start the loop when isRunning is true\n  if (isMatching) {\n    intervalId = setInterval(() => {\n      getMatch();\n\n      if(matched)\n      {\n        getPattern();\n        setMatched(false);\n      }        \n\n      \n    }, 1000);\n  }\n\n  // Clean up the interval on component unmount or when isRunning changes\n  return () => {\n    clearInterval(intervalId); // Clear the interval\n  };\n}, [isMatching]); // Effect runs when isRunning changes\n */\n  // Effect to start the interval loop when isMatching is true\n  useEffect(() => {\n    if (!isMatching) return; // Only run if isMatching is true\n\n    const intervalId = setInterval(async() => {\n      getMatch();\n        // toggleWhiteSquareVisibility('Red', true);\n        // for(const p of pattern )\n        // {\n        //   console.log(\"PATTERN : \" + p)\n\n        // }\n        // for (let i = 0; i < pattern.length; i++) {\n        //   console.log(\"PATTERN : \" + pattern[i]);\n        // }\n\n      //NEED TO FIX \n      if (matched) {\n        displayPatternWithDelay();\n        // console.log(\"#############PATTERN########## : \" + pattern);\n        console.log(\"Matched\");\n        //Generate new pattern to match\n        getPattern();\n        // console.log(\"#############PATTERN########## : \" + pattern);\n\n\n        //Clear player session match string\n        clearPlayerPattern();\n        \n        setMatched(false); // Reset matched for the next interval\n        setIsMatching(false);\n      }\n    }, 1000);\n\n    // Cleanup interval when isMatching changes or on unmount\n    return () => clearInterval(intervalId);\n  }, [isMatching, matched]); // Re-run effect when `isMatching` or `matched` changes\n\n \n  const handleSquareClick = (colour) => {\n    console.log(`${colour} square clicked!`);\n    // setSendValue(colour);\n  };\n\n  const getPattern = async () => {\n      try {\n        const response = await axios.get('/api/memorycolourmaster/getpattern');\n        // Update the state with the response message\n        setPattern(response.data.message);\n        console.log(\"#############PATTERN########## : \" + pattern);\n      } catch (error) {\n        // Handle error case\n        console.error(\"Error fetching the greeting: \", error);\n      }      \n   };\n  \n   const clearPattern = async () => {\n    try {\n      const response = await axios.get('/api/memorycolourmaster/clearpattern');\n      setResponseMessage(response.data.message);\n      setPattern(\"\");\n    } catch (error) {\n      console.error(\"Error clearing the pattern : \", error);\n    }\n  };\n   \n  const clearPlayerPattern = async () => {\n    try {\n      const response = await axios.get('/api/memorycolourmaster/clearplayerpattern');\n      setResponseMessage(response.data.message);\n      // setPattern(\"\");\n    } catch (error) {\n      console.error(\"Error clearing the pattern : \", error);\n    }\n  };\n   \n  const getMatch = async () => {\n    try {\n      const response = await axios.get('/api/memorycolourmaster/getmatch');\n      setResponseMatchMessage(response.data.message);\n      if(response.data.message === \"True\")\n      // if(responseMatchMessage === \"True\")\n      {\n        console.log(\"True\");\n        console.log(`${responseMatchMessage}`);\n        setMatched(true)\n      }\n      else\n      {\n        console.log(\"False\");\n        console.log(`${responseMatchMessage}`);\n        setMatched(false);\n      }\n    } catch (error) {\n      console.error(\"Error clearing the pattern : \", error);\n    }\n  };\n\n\n  //POST\n  // Send message to ASP.NET \n  const sendPattern = async (newSendValue) => {\n    try {\n      const response = await axios.post('/api/memorycolourmaster/send', { text: newSendValue});\n      setResponseMessage(response.data.message);\n    } catch (error) {\n      console.error(\"Error sending the message: \", error);\n    }\n  };\n\n   // Function to toggle visibility of white squares based on hovered color\n   const toggleWhiteSquareVisibility = (color, isVisible) => {\n    setWhiteSquareVisibility((prev) => ({\n      ...prev,\n      [color]: isVisible,\n    }));\n  };\n\n\n  // Function to toggle the game loop on and off\n  const toggleGameLoop = () => {\n    setIsRunning((prev) => !prev); // Toggle the isRunning state\n  };\n\n  const validatePattern = (colour) => {\n      if(pattern[index] === colour)\n      {\n        console.log(`${colour} Entered`);\n        console.log(\"CORRECT!!!\");\n        // index++;\n        setIndex((prevIndex) => prevIndex + 1); // Move to the next index\n        console.log(\"Current Index: \" + (index + 1));\n        \n        setIndex(0);\n        \n        if(index < pattern.length)\n          getPattern();\n      }else{\n        console.log(\"Wrong!!!\");\n        // index = 0;\n        setIndex(0);\n        clearPattern();\n        getPattern();\n        console.log(\"Current Index: \" + (index ));\n      }\n      \n      // console.log(char); // Logs each character\n\n  };\n\n  useEffect(() => {\n    updateGameBoardSize();\n    \n    const fetchPattern = async () => {\n      try {\n        const response = await axios.get('/api/memorycolourmaster/getpattern');\n        // Update the state with the response message\n        setPattern(response.data.message);\n      } catch (error) {\n        // Handle error case\n        console.error(\"Error fetching the greeting: \", error);\n      }      \n    };\n    \n   fetchPattern(); \n    // setIsRunning(true);\n    \n     // Add event listener to update size on resize\n     window.addEventListener('resize', updateGameBoardSize);\n\n     // Clean up the event listener on unmount\n     return () => {\n       window.removeEventListener('resize', updateGameBoardSize);\n     };\n}, []); // The empty array ensures the effect runs only once (when the component mounts)\n\n\n\n\n  return (\n    <div className=\"App\" style={styles.container}>\n      <div style={{...styles.gameboard, width: gameBoardSize}}>\n    \n          <div\n            style={{ ...styles.square, ...styles.red, backgroundColor: 'red'}}\n            onMouseEnter={() => interactive ? (toggleWhiteSquareVisibility('Red', true)) : null} \n            onMouseLeave={() => interactive ? (toggleWhiteSquareVisibility('Red', false)) : null} \n            onClick={() => {\n              if (interactive){\n                handleSquareClick('Red');\n                sendPattern('1');\n                setIsMatching(true);\n                // validatePattern('1');\n              }\n            }}\n           ></div>\n          <div\n            style={{ ...styles.square, ...styles.blue, backgroundColor: 'blue'}}\n            onMouseEnter={() => interactive ? (toggleWhiteSquareVisibility('Blue', true)) : null} \n            onMouseLeave={() => interactive ? (toggleWhiteSquareVisibility('Blue', false)) : null} \n            onClick={() => {\n              if(interactive){\n                handleSquareClick('Blue');\n                sendPattern('2');\n                setIsMatching(true);\n                // validatePattern('2');\n              }\n            }}\n          ></div>\n          <div\n            style={{ ...styles.square, ...styles.green, backgroundColor: 'green'}}\n            onMouseEnter={() => interactive ? (toggleWhiteSquareVisibility('Green', true)) : null} \n            onMouseLeave={() => interactive ? (toggleWhiteSquareVisibility('Green', false)) : null} \n            onClick={() => {\n              if(interactive)\n              {\n                handleSquareClick('Green')\n                sendPattern('3');\n                setIsMatching(true);\n                // validatePattern('3');\n              }\n            }}\n          ></div>\n          <div\n            style={{ ...styles.square, ...styles.yellow, backgroundColor: 'yellow'}}\n            onMouseEnter={() => interactive ? (toggleWhiteSquareVisibility('Yellow', true)) : null} \n            onMouseLeave={() => interactive ? (toggleWhiteSquareVisibility('Yellow', false)) : null} \n            onClick={() => {\n              if(interactive)\n              {\n                handleSquareClick('Yellow')\n                sendPattern('4');\n                setIsMatching(true);\n        console.log(\"#############PATTERN########## : \" + pattern);\n                // validatePattern('4');\n              }\n            }}\n          ></div>\n\n          {whiteSquareVisibility.Red && (\n            <div style={{ ...styles.white, ...styles.white_red, backgroundColor: interactive ? 'white' : 'cyan' }}></div>\n          )}\n          {whiteSquareVisibility.Blue && (\n            <div style={{ ...styles.white, ...styles.white_blue, backgroundColor: interactive ? 'white' : 'cyan'}}></div>\n          )}\n          {whiteSquareVisibility.Green && (\n            <div style={{ ...styles.white, ...styles.white_green, backgroundColor: interactive ? 'white' : 'cyan'}}></div>\n          )}\n          {whiteSquareVisibility.Yellow && (\n            <div style={{ ...styles.white, ...styles.white_yellow, backgroundColor: interactive ? 'white' : 'cyan' }}></div>\n          )}\n      </div>\n    \n      <div id=\"player_ui\" className='ui' style={styles.ui}>\n        <h1>{pattern}</h1>\n        <button onClick={getPattern}>Generate new pattern </button>\n        <button onClick={clearPattern}>Clear pattern </button>\n        <button\n          style={styles.button}\n          onClick={() => setInteractive((prev) => !prev)} // Directly toggle the state\n        >\n          {interactive? 'Disable Interaction' : 'Enable Interaction'}\n        </button>\n    \n        <h3>Counter: {count}</h3>\n        <button \n          disabled={!interactive}\n          onClick={toggleGameLoop}\n        >\n            {interactive ? 'Start Loop' : 'Looping'}\n            {/* {isRunning ? 'Stop Loop' : 'Start Loop'} */}\n        </button>\n\n\n        <h2>{responseMessage}</h2>\n        <h2>{responseMatchMessage}</h2>\n      </div>\n    \n    </div>\n  );\n}\n\n//Inline styles\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column', // Arrange children in a column\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    gap: '20px',\n  },\n  gameboard: {\n    position: 'relative', // Set position relative for absolute children\n    display: 'grid', // Enable grid layout\n    gridTemplateColumns: 'repeat(2, 1fr)', // 2 equal columns\n    gridTemplateRows: 'repeat(2, 1fr)', // 2 equal rows\n    height: '80vh', // Fill the full height of the viewport\n    gap: '10px', // Space between grid items\n    backgroundColor: '#000', // Black background for the game board\n    border: '2px solid #FF4500', // Border for the game board\n    padding: '20px', // Padding around the grid container\n    marginBottom: '20px', // Space below the game board\n    marginTop: '20px', // Space at the top of the game board\n    zIndex: 0, // Set behind colored squares\n  },\n  square: {\n    // position: 'absolute', // Absolute positioning for overlapping squares\n    display: 'flex', // Use flexbox for centering content inside the squares\n    justifyContent: 'center', // Center content horizontally\n    alignItems: 'center', // Center content vertically\n    backgroundColor: '#007bff', // Background color for squares\n    borderRadius: '5px', // Rounded corners for squares\n    fontSize: '24px', // Font size for square text\n    color: '#fff', // Text color for visibility\n    cursor: 'pointer', // Pointer cursor for interactive squares\n  },\n    red: {\n      backgroundColor: 'red',\n      zIndex: 2, // Set behind colored squares\n    },\n    blue: {\n      backgroundColor: 'blue',\n      zIndex: 2, // Set behind colored squares\n    },\n    green: {\n      backgroundColor: 'green',\n      zIndex: 2, // Set behind colored squares\n    },\n    yellow: {\n      backgroundColor: 'yellow',\n      zIndex: 2, // Set behind colored squares\n    },\n    white: {\n      backgroundColor: 'white',\n      width: '47.5%', // Larger width for white squares\n      height: '46.5%', // Larger height for white squares\n      position: 'absolute', // Make it absolute to fill the gameboard\n      zIndex: 1, // Set behind colored squares\n    },\n    white_red: {\n      top: '3.5%', // Align to the top of the gameboard\n      left: '2.5%', // Align to the left of the gameboard\n    },\n    white_blue: {\n      top: '3.5%', // Align to the top of the gameboard\n      left: '50%', // Align to the right of the gameboard\n    },\n    white_green: {\n      top: '50%', // Align to the bottom of the gameboard\n      left: '2.5%', // Align to the left of the gameboard\n    },\n    white_yellow: {\n      top: '50%', // Align to the bottom of the gameboard\n      left: '50%', // Align to the right of the gameboard\n    },\n  \n  \n  ui: {\n    backgroundColor: '#f0f0f0',\n    padding: '20px',\n    borderRadius: '10px',\n    textAlign: 'center',\n    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',\n    display: 'flex',\n    flexDirection: 'column', // Stack items vertically\n    alignItems: 'center', // Center align items horizontally\n    gap: '10px', // Add some space between items\n  },\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}